/*Practical 1: Consider telephone book database of N clients. Make use of a hash table implementation to quickly
lookup client‘s telephone number. Make use of two collision handling techniques and compare them
using number of comparisons required to find a set of telephone numbers*/




#include<iostream>
#include<string.h>
using namespace std;


// Node structure for linked list
struct Node {
    int value;
    Node *next;
};


// Hashing class for hash table operations
class Hashing {
private:
    Node* HashTable[10]; // Array of linked lists


public:
    // Constructor to initialize hash table
    Hashing() {
        for(int i = 0; i < 10; i++) {
            HashTable[i] = NULL;
        }
    }


    // Hash function to calculate index in hash table
    int HashFunction(int value) {
        return (value % 10);
    }


    // Function to create a new node
    Node* createNode(int x) {
        Node *temp = new Node;
        temp->value = x;
        temp->next = NULL;
        return temp;
    }


    // Function to display hash table
    void display() {
        for(int i = 0; i < 10; i++) {
            cout << "a[" << i << "]:";
            Node *temp = HashTable[i];
            while(temp != NULL) {
                cout << "->" << temp->value;
                temp = temp->next;
            }
            cout << endl;
        }
    }


    // Function to search for an element in hash table
    bool searchElement(int value) {
        int hashVal = HashFunction(value);
        Node *entry = HashTable[hashVal];
        while(entry != NULL) {
            if(entry->value == value) {
                cout << "Element Found at Index " << hashVal << ": " << entry->value << endl;
                return true;
            }
            entry = entry->next;
        }
        cout << "Element not found." << endl;
        return false;
    }


    // Function to delete an element from hash table
    void deleteElement(int value) {
        int hashVal = HashFunction(value);
        Node *entry = HashTable[hashVal];
        Node *prev = NULL;
        while(entry != NULL) {
            if(entry->value == value) {
                if(prev == NULL) {
                    HashTable[hashVal] = entry->next;
                } else {
                    prev->next = entry->next;
                }
                delete entry; // Free memory
                cout << "Element " << value << " deleted successfully." << endl;
                return;
            }
            prev = entry;
            entry = entry->next;
        }
        cout << "Element not found." << endl;
    }


    // Function to insert an element into hash table
    void insertElement(int value) {
        int hashVal = HashFunction(value);
        Node *newNode = createNode(value);
        if(HashTable[hashVal] == NULL) {
            HashTable[hashVal] = newNode;
        } else {
            Node *temp = HashTable[hashVal];
            while(temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
        cout << "Element " << value << " inserted successfully." << endl;
    }
};


// Main function
int main() {
    int ch, data;
    Hashing h;


    do {
        cout << "\nTelephone:\n1. Insert\n2. Display\n3. Search\n4. Delete\n5. Exit\n";
        cout << "Enter your choice: ";
        cin >> ch;


        switch(ch) {
            case 1:
                cout << "Enter phone no. to be inserted: ";
                cin >> data;
                h.insertElement(data);
                break;
            case 2:
                h.display();
                break;
            case 3:
                cout << "Enter the no to be searched: ";
                cin >> data;
                h.searchElement(data);
                break;
            case 4:
                cout << "Enter the phone no. to be deleted: ";
                cin >> data;
                h.deleteElement(data);
                break;
            case 5:
                cout << "Exiting program." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while(ch != 5);


    return 0;
}




/* OUTPUT */


/*Telephone:        
1.Insert
2.Display
3.Search
4.Delete
5.Exit
Enter your choice:1


 Enter phone no. to be inserted:25


Telephone:
1.Insert
2.Display
3.Search
4.Delete
5.Exit
Enter your choice:2
a[0]:
a[1]:
a[2]:
a[3]:
a[4]:
a[5]:->25
a[6]:
a[7]:
a[8]:
a[9]:


Telephone:
1.Insert
2.Display
3.Search
4.Delete
5.Exit
Enter your choice:3


 Enter the no to be searched:25


Element Found at:5:25


Telephone:
1.Insert
2.Display
3.Search
4.Delete
5.Exit
Enter your choice:4


 Enter th phno to be deleted:25
phno deleted


Telephone:
1.Insert
2.Display
3.Search
4.Delete
5.Exit*/